{
  "_args": [
    [
      {
        "raw": "gl-skybox",
        "scope": null,
        "escapedName": "gl-skybox",
        "name": "gl-skybox",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/noah/Desktop/Uni_4/Semester_1/Graphics/GROUP_PROJECT"
    ]
  ],
  "_from": "gl-skybox@latest",
  "_id": "gl-skybox@1.0.1",
  "_inCache": true,
  "_location": "/gl-skybox",
  "_nodeVersion": "5.1.0",
  "_npmUser": {
    "name": "wwwtyro",
    "email": "wwwtyro@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gl-skybox",
    "scope": null,
    "escapedName": "gl-skybox",
    "name": "gl-skybox",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gl-skybox/-/gl-skybox-1.0.1.tgz",
  "_shasum": "faecbbb207a47637f747cd101365d13a11b51969",
  "_shrinkwrap": null,
  "_spec": "gl-skybox",
  "_where": "/Users/noah/Desktop/Uni_4/Semester_1/Graphics/GROUP_PROJECT",
  "author": {
    "name": "Rye Terrell",
    "email": "ryeterrell@ryeterrell.net",
    "url": "http://wwwtyro.github.io"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "bugs": {
    "url": "https://github.com/wwwtyro/gl-skybox/issues"
  },
  "dependencies": {
    "geo-3d-box": "^1.0.4",
    "gl-geometry": "^1.3.0",
    "gl-mat4": "^1.1.4",
    "gl-shader": "^4.1.1",
    "gl-state": "^1.0.0",
    "glslify": "^5.0.0"
  },
  "description": "Draws a skybox into a 3D scene.",
  "devDependencies": {
    "budo": "^7.1.0",
    "bunny": "^1.0.1",
    "gl-cubemap-placeholder": "^2.0.1",
    "gl-geometry": "^1.3.0",
    "gl-mat4": "^1.1.4",
    "gl-shader": "^4.1.1",
    "glslify": "^5.0.0",
    "normals": "^1.0.1",
    "standard": "^5.4.1"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "faecbbb207a47637f747cd101365d13a11b51969",
    "tarball": "https://registry.npmjs.org/gl-skybox/-/gl-skybox-1.0.1.tgz"
  },
  "gitHead": "c796ea7abd398f58549537f5e120507a584765c2",
  "homepage": "https://github.com/wwwtyro/gl-skybox#readme",
  "keywords": [
    "stackgl",
    "skybox"
  ],
  "license": "Unlicense",
  "main": "index.js",
  "maintainers": [
    {
      "name": "wwwtyro",
      "email": "wwwtyro@gmail.com"
    }
  ],
  "name": "gl-skybox",
  "optionalDependencies": {},
  "readme": "# gl-skybox\n\nDraws a skybox into a 3D scene.\n\n## Install\n\n```sh\nnpm install gl-skybox\n```\n\n## Example\n\n```js\nvar mat4 = require('gl-mat4')\nvar createCubemap = require('gl-cubemap-placeholder')\nvar createSkybox = require('gl-skybox')\n\nvar cubemap = createCubemap(gl, 512)\ncubemap.generateMipmap()\ncubemap.minFilter = gl.LINEAR_MIPMAP_LINEAR\ncubemap.magFilter = gl.LINEAR\n\nvar skybox = createSkybox(gl, cubemap)\n\nvar view = mat4.create()\nvar projection = mat4.create()\n\nmat4.lookAt(view, [0, 0, 0], [0, 0, -1], [0, 1, 0])\nmat4.perspective(projection, Math.PI / 2, width/height, 0.1, 10.0)\n\nskybox.draw({\n  view: view,\n  projection: projection\n})\n\n```\n\n## API\n\n```js\nvar createSkybox = require('gl-skybox')\n```\n\n### Constructor\n\n#### `var skybox = createSkybox(gl, cubemap)`\n\nTakes a WebGL context `gl` and a [gl-texture-cube](https://github.com/wwwtyro/gl-texture-cube)\nobject `cubemap`. Returns an object `skybox` ready for rendering into your\nscene.\n\n### Methods\n\n#### `skybox.draw(camera)`\n\nDraws the skybox into your scene.\n\nTakes a `camera` object that defines the view and projection matrices:\n\n```js\n{\n  view: gl-mat4 matrix,\n  projection: gl-mat4 matrix\n}\n```\n\nThis function will take care of centering the skybox and projection near/far\nvalues for you, so there is no need to make a view/projection matrix specifically\nfor rendering the skybox. It will also disable depth buffer read/writes and\nthen restore them to whatever you had them set to before returning, so there's\nno need to handle that yourself.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wwwtyro/gl-skybox.git"
  },
  "scripts": {
    "start": "budo --live example/index.js -- -t glslify",
    "test": "standard"
  },
  "version": "1.0.1"
}
